package mmdbwriter

import "github.com/maxmind/mmdbwriter/mmdbtype"

type dataMapKey string

// dataMap is used to deduplicate data inserted into the tree to reduce
// memory usage using keys generated by keyWriter.
type dataMap struct {
	data      map[dataMapKey]mmdbtype.DataType
	keyWriter *keyWriter

	// This exists to reduce allocations by interning the key. It is
	// a bit silly given they key is already in data above.
	keyMap map[string]dataMapKey
}

const noDataMapKey dataMapKey = ""

func newDataMap() *dataMap {
	return &dataMap{
		data:      map[dataMapKey]mmdbtype.DataType{},
		keyMap:    map[string]dataMapKey{},
		keyWriter: newKeyWriter(),
	}
}

func (dm *dataMap) get(k dataMapKey) mmdbtype.DataType {
	if k == noDataMapKey {
		return nil
	}
	return dm.data[k]
}

// store stores the value in the dataMap and returns a key for it.
func (dm *dataMap) store(v mmdbtype.DataType) (dataMapKey, error) {
	keyBytes, err := dm.keyWriter.key(v)
	if err != nil {
		return "", err
	}

	key, ok := dm.keyMap[string(keyBytes)]
	if !ok {
		key = dataMapKey(keyBytes)
		dm.keyMap[string(keyBytes)] = key
	}

	_, ok = dm.data[key]
	if !ok {
		dm.data[key] = v
	}

	return key, nil
}
